# Generated by Django 3.0.4 on 2020-04-03 01:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddressType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=25)),
                ('desc', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=4, unique=True)),
                ('desc', models.CharField(blank=True, max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sdn', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['-sdn'],
            },
        ),
        migrations.CreateModel(
            name='Locator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('desc', models.CharField(blank=True, max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nsn', models.CharField(max_length=13, null=True, unique=True)),
                ('nomen', models.CharField(max_length=50, null=True)),
                ('uom', models.CharField(max_length=5, null=True)),
                ('price', models.IntegerField(null=True)),
                ('sac', models.IntegerField(null=True)),
                ('serial_control_flag', models.CharField(max_length=2, null=True)),
                ('lot_control_flag', models.CharField(max_length=2, null=True)),
                ('recoverability_code', models.CharField(max_length=2, null=True)),
                ('shelf_life_code', models.IntegerField(null=True)),
                ('controlled_inv_item_code', models.CharField(max_length=2, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_request', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SuppAdd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5)),
                ('desc', models.CharField(blank=True, max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='SubInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('desc', models.CharField(blank=True, max_length=40)),
                ('suppadd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subinventorys', to='solo_rog_api.SuppAdd')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_date', models.DateTimeField()),
                ('key_and_transmit_date', models.DateTimeField(blank=True, null=True)),
                ('esd', models.DateField(blank=True, null=True)),
                ('projected_qty', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('received_qty', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('received_by', models.CharField(blank=True, max_length=50, null=True)),
                ('dic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solo_rog_api.Dic')),
                ('document', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='solo_rog_api.Document')),
                ('locator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='statuses', to='solo_rog_api.Locator')),
                ('subinventory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='statuses', to='solo_rog_api.SubInventory')),
            ],
        ),
        migrations.AddField(
            model_name='locator',
            name='subinventorys',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locators', to='solo_rog_api.SubInventory'),
        ),
        migrations.AddField(
            model_name='document',
            name='part',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='solo_rog_api.Part'),
        ),
        migrations.AddField(
            model_name='document',
            name='service_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='solo_rog_api.ServiceRequest'),
        ),
        migrations.AddField(
            model_name='document',
            name='suppadd',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='solo_rog_api.SuppAdd'),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('ric', models.CharField(max_length=20)),
                ('addy1', models.CharField(blank=True, max_length=50, null=True)),
                ('addy2', models.CharField(blank=True, max_length=50, null=True)),
                ('addy3', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(max_length=20)),
                ('state', models.CharField(max_length=20)),
                ('zip', models.CharField(blank=True, max_length=11, null=True)),
                ('country', models.CharField(blank=True, max_length=15, null=True)),
                ('address_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='solo_rog_api.AddressType')),
                ('document', models.ManyToManyField(blank=True, related_name='addresses', to='solo_rog_api.Document')),
            ],
        ),
        migrations.CreateModel(
            name='AAC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aac', models.CharField(max_length=6, verbose_name='aac')),
                ('cor_permissions', models.BooleanField(default=False, verbose_name='cor permissions')),
                ('d6t_permissions', models.BooleanField(default=False, verbose_name='d6t permissions')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aacs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
